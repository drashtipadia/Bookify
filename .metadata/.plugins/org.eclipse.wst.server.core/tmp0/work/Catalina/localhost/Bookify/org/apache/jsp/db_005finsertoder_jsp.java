/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.91
 * Generated at: 2024-02-20 07:14:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;

public final class db_005finsertoder_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 public Connection con;
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/connection.jsp", Long.valueOf(1703817573301L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

try{
	Class.forName("com.mysql.jdbc.Driver");
	con=DriverManager.getConnection("jdbc:mysql://localhost/bookify","root","");
	
}catch(Exception e)
{
	System.out.println(e);
}
     

      out.write("\r\n");
      out.write("\r\n");

Statement st=con.createStatement();
ResultSet rsbill,rscart;
PreparedStatement ps,psorder,psupdateqty,deletecart;
String user=session.getAttribute("id").toString();
String date=java.time.LocalDate.now().toString();
try{
	if(request.getParameter("paymentType").equals("COD"))
	{
		ps=con.prepareStatement("INSERT INTO bill(uid,address1,address2,phone,city,state,payment_type,total_amount,bill_date) VALUES(?,?,?,?,?,?,?,?,?)");
		 ps.setString(1, user);
		 ps.setString(2, request.getParameter("address1"));
		 ps.setString(3, request.getParameter("address2"));
		 ps.setString(4, request.getParameter("phone"));
		 ps.setString(5, request.getParameter("city"));
		 ps.setString(6, request.getParameter("state"));
		 ps.setString(7, request.getParameter("paymentType"));
		 ps.setString(8, request.getParameter("totAmount"));
		 ps.setString(9, date);
		 ps.executeUpdate();
		
	}
	else
	{
		  ps=con.prepareStatement("INSERT INTO bill(uid,address1,address2,phone,city,state,payment_type,cardname,cardnumber,cvv,card_expiry,total_amount,bill_date) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)");
		    ps.setString(1, user);
		    ps.setString(2, request.getParameter("address1"));
		    ps.setString(3, request.getParameter("address2"));
		    ps.setString(4, request.getParameter("phone"));
		    ps.setString(5, request.getParameter("city"));
		    ps.setString(6, request.getParameter("state"));
		    ps.setString(7, request.getParameter("paymentType"));
		    ps.setString(8, request.getParameter("cname"));
		    ps.setString(9, request.getParameter("Cnumber"));
		    ps.setString(10, request.getParameter("cvv"));
		    ps.setString(11, request.getParameter("cexpiry"));
		    ps.setString(12, request.getParameter("totAmount"));
		    ps.setString(13, date);
		    ps.executeUpdate();
		
	}
	
	
	
	
		 rsbill=st.executeQuery("SELECT * FROM bill WHERE uid='"+user+"' ORDER BY bill_date DESC,bill_id DESC LIMIT 1");
		  if(rsbill.next())
		  { 
			  //out.print("if");
			  String billid=rsbill.getString("bill_id");
			  //out.print(rsbill.getString("bill_id"));
			  rscart=st.executeQuery("SELECT * FROM cart INNER JOIN product ON cart.pro_id=product.pro_id  WHERE uid='"+user+"'");
			  while(rscart.next())
			  { 
				 // out.print("While");
				//	out.print(billid);  
				  psorder=con.prepareStatement("INSERT INTO ordertbl(pro_id,price,orderQty,status,bill_id) VALUES(?,?,?,?,?)");
				  psorder.setString(1, rscart.getString("pro_id"));
				  psorder.setString(2, rscart.getString("pro_price"));
				  psorder.setString(3, rscart.getString("quantity"));
				  psorder.setString(4, "Ordered");
				  psorder.setString(5, billid);
				  psorder.executeUpdate();
				  
				  int updateqty=rscart.getInt("pro_quantity")-rscart.getInt("quantity");
			       
				  
			       psupdateqty=con.prepareStatement("UPDATE product SET pro_quantity =? WHERE pro_id = ?");
			       psupdateqty.setInt(1, updateqty);
			       psupdateqty.setString(2, rscart.getString("pro_id"));
			       psupdateqty.executeUpdate();
				 
				 deletecart=con.prepareStatement("DELETE FROM cart WHERE cart_id = ?");
			      deletecart.setString(1, rscart.getString("cart_id"));
			    deletecart.executeUpdate();
			  }
		  }
		  out.print("<script>alert('order conform') </script>"); 
		  request.getRequestDispatcher("Index.jsp").include(request, response);
  
}catch(Exception e)
{
	out.print(e);
}
 

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
